syntax = "proto3";

package chat;

option go_package = "chat";

message SubscribeRequest {
    string username = 1;
}

message SubscribeResponse {
    string token = 1;
}

message DisconnectRequest {
    string token = 1;
}

message DisconnectResponse {
    bool disconnected = 1;
}

message BroadcastRequest {
    string token = 1;
    string content = 2;
}

message BroadcastResponse {
    string username = 1;
    string content = 2;
}

service ChatService {
    // Any clients have to subscribe to give some details about itself.
    // Can return an ALREADY_EXISTS if a client with the same name is already registered.
    rpc Subscribe(SubscribeRequest) returns (SubscribeResponse) {};

    // For now, clients that gives someone else name will disconnect this person.
    // A unique token generated by the client will be added soon to prevent this vulnerability.
    // Return NOT_FOUND if the client is already disconnected.
    rpc Disconnect(DisconnectRequest) returns (DisconnectResponse) {};

    // Bidirectional RPC that broadcasts to all clients incoming messages to the server.
    // It may be done more elegantly. Any ideas ?
    rpc Broadcast(stream BroadcastRequest) returns (stream BroadcastResponse) {};
}